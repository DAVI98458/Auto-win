-- // Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- // Load Rayfield (official)
setclipboard("https://lootdest.org/s?nJO3MzzM") -- Copia automaticamente o link da key (substitua pelo seu)
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- // Create Rayfield Window (with Key System)
local Window = Rayfield:CreateWindow({
    Name = "red light, Green light and Glass bridge",
    LoadingTitle = "Shadow Hub",
    LoadingSubtitle = "by @shadown_gd",
    ConfigurationSaving = { Enabled = false },
    Discord = { Enabled = false },
    KeySystem = true,
    KeySettings = {
        Title = "Shadow Hub Key",
        Subtitle = "Enter your key below",
        Note = "The key link has already been copied to your clipboard",
        FileName = "ShadowHubKeyFile",
        SaveKey = false,
        GrabKeyFromSite = false,
        Key = "11.7ðŸ¥³"
    }
})

-- // Variables for toggles
local Toggles = {
    ESP = false,
    AimbotNormal = false,
    OnAimbot = false,
    TeamCheck = false,
    DeadCheck = false,
    WallCheck = false,
    Noclip = false,
    InfiniteJump = false,
}

local WalkSpeedValue = 16
local HighlightFolder = Instance.new("Folder", game.CoreGui)
HighlightFolder.Name = "ShadowHubHighlights"

-- // Functions
local function isPlayerDead(player)
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        return humanoid.Health <= 0
    end
    return true
end

local function isVisible(targetPart)
    local origin = Camera.CFrame.Position
    local direction = (targetPart.Position - origin)
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local raycastResult = Workspace:Raycast(origin, direction, raycastParams)
    if raycastResult then
        return raycastResult.Instance:IsDescendantOf(targetPart.Parent)
    end
    return true
end

local function getClosestPlayer(movingOnly)
    local closestPlayer = nil
    local shortestDistance = math.huge
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            if Toggles.TeamCheck and player.Team == LocalPlayer.Team then continue end
            if Toggles.DeadCheck and isPlayerDead(player) then continue end
            if Toggles.WallCheck and not isVisible(player.Character.Head) then continue end
            if movingOnly then
                local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
                if not rootPart or rootPart.Velocity.Magnitude < 1 then continue end
            end
            local screenPos, onScreen = Camera:WorldToScreenPoint(player.Character.Head.Position)
            if onScreen then
                local centerX, centerY = Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(centerX, centerY)).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end
    return closestPlayer
end

-- // Aimbot Loop
RunService.RenderStepped:Connect(function()
    local target = nil
    if Toggles.AimbotNormal then
        target = getClosestPlayer(false)
    elseif Toggles.OnAimbot then
        target = getClosestPlayer(true)
    end
    if target and target.Character and target.Character:FindFirstChild("Head") then
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, target.Character.Head.Position)
    end
end)

-- // ESP Handling
local function clearHighlights()
    for _, child in pairs(HighlightFolder:GetChildren()) do
        child:Destroy()
    end
end

local function createOrUpdateESP()
    clearHighlights()
    if not Toggles.ESP then return end
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("Head") then
            local highlight = Instance.new("Highlight")
            highlight.Name = player.Name .. "_Highlight"
            highlight.Adornee = player.Character
            highlight.Parent = HighlightFolder
            if player.Team == LocalPlayer.Team then
                highlight.FillColor = Color3.fromRGB(0, 0, 255) -- Blue for allies
                highlight.OutlineColor = Color3.fromRGB(0, 0, 255)
            else
                highlight.FillColor = Color3.fromRGB(255, 0, 0) -- Red for enemies
                highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
            end
        end
    end
end

-- Refresh ESP every 1 second
task.spawn(function()
    while true do
        if Toggles.ESP then
            createOrUpdateESP()
        else
            clearHighlights()
        end
        task.wait(1)
    end
end)

-- // BillboardGui ESP for names
local espBillboards = {}

local function clearNameESP()
    for _, gui in pairs(espBillboards) do
        if gui and gui.Parent then gui:Destroy() end
    end
    espBillboards = {}
end

local function updateNameESP()
    clearNameESP()
    if not Toggles.ESP then return end
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("Head") then
            local billboard = Instance.new("BillboardGui")
            billboard.Name = player.Name .. "_NameESP"
            billboard.Adornee = player.Character.Head
            billboard.Parent = game.CoreGui
            billboard.AlwaysOnTop = true
            billboard.Size = UDim2.new(0, 100, 0, 20)
            billboard.StudsOffset = Vector3.new(0, 2, 0)

            local label = Instance.new("TextLabel", billboard)
            label.Size = UDim2.new(1, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.Text = player.Name
            label.TextColor3 = player.TeamColor.Color
            label.TextSize = 11
            label.Font = Enum.Font.SourceSansBold
            label.TextStrokeTransparency = 0.75
            label.TextWrapped = true

            table.insert(espBillboards, billboard)
        end
    end
end

task.spawn(function()
    while true do
        if Toggles.ESP then
            updateNameESP()
        else
            clearNameESP()
        end
        task.wait(1)
    end
end)

-- // Auto Win Tab
local AutoWinTab = Window:CreateTab("Auto Win")

AutoWinTab:CreateButton({
    Name = "Auto Win Glass Bridge",
    Callback = function()
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-22, 161, 1546)
        Rayfield:Notify({
            Title = "Auto Win",
            Content = "Wait 3 seconds",
            Duration = 3
        })
        task.wait(3)
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(195, 161, 1548)
    end
})

AutoWinTab:CreateButton({
    Name = "Auto Win Red Light and Green Light",
    Callback = function()
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(339, 4, -123)
        Rayfield:Notify({
            Title = "Auto Win",
            Content = "Wait 4 seconds",
            Duration = 4
        })
        task.wait(4)
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-247, 4, -187)
    end
})

AutoWinTab:CreateButton({
    Name = "Safezone",
    Callback = function()
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(383, 4, -80)
    end
})

-- // Modifiers Tab
local ModTab = Window:CreateTab("Modifiers")

ModTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 300},
    Increment = 1,
    CurrentValue = 16,
    Callback = function(v)
        WalkSpeedValue = v
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = v
        end
    end
})

ModTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 1,
    CurrentValue = 50,
    Callback = function(v)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character.Humanoid.JumpPower = v
        end
    end
})

ModTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Callback = function(v)
        Toggles.Noclip = v
    end
})

ModTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Callback = function(v)
        Toggles.InfiniteJump = v
    end
})

-- // Noclip logic
RunService.Stepped:Connect(function()
    if Toggles.Noclip and LocalPlayer.Character then
        for _, part in pairs(LocalPlayer.Character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
end)

-- // Infinite jump logic
UserInputService.JumpRequest:Connect(function()
    if Toggles.InfiniteJump and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

-- // Aimbot Tab
local AimbotTab = Window:CreateTab("Aimbot")

AimbotTab:CreateToggle({
    Name = "ESP All Nickname",
    CurrentValue = false,
    Callback = function(v)
        Toggles.ESP = v
    end
})

AimbotTab:CreateToggle({
    Name = "Aimbot Normal",
    CurrentValue = false,
    Callback = function(v)
        Toggles.AimbotNormal = v
        if v then Toggles.OnAimbot = false end
    end
})

AimbotTab:CreateToggle({
    Name = "On Aimbot (Moving Targets)",
    CurrentValue = false,
    Callback = function(v)
        Toggles.OnAimbot = v
        if v then Toggles.AimbotNormal = false end
    end
})

AimbotTab:CreateToggle({
    Name = "Team Check",
    CurrentValue = false,
    Callback = function(v)
        Toggles.TeamCheck = v
    end
})

AimbotTab:CreateToggle({
    Name = "Dead Check",
    CurrentValue = false,
    Callback = function(v)
        Toggles.DeadCheck = v
    end
})

AimbotTab:CreateToggle({
    Name = "Wall Check",
    CurrentValue = false,
    Callback = function(v)
        Toggles.WallCheck = v
    end
})

-- // Tools Tab
local ToolsTab = Window:CreateTab("Tools")

ToolsTab:CreateButton({
    Name = "TP Tool",
    Callback = function()
        local tool = Instance.new("Tool")
        tool.Name = "Teleport Tool"
        tool.RequiresHandle = false
        tool.CanBeDropped = false

        local function onActivated()
            local mouse = LocalPlayer:GetMouse()
            local targetPos = mouse.Hit.p
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPos)
            end
        end

        tool.Activated:Connect(onActivated)
        tool.Parent = LocalPlayer.Backpack

        Rayfield:Notify({
            Title = "TP Tool",
            Content = "Tool added to your backpack.",
            Duration = 3
        })
    end
})

ToolsTab:CreateParagraph({
    Title = "More stuff coming soon",
    Content = ""
})

-- End of Script
